job:
  type: train                 # train, eval, grid, ...

  # Main device to use for this job (e.g., 'cpu', 'cuda', 'cuda:0')
  device: 'cuda'


## INPUT/OUTPUT ################################################################

dataset:
  name: 'toy'

  # training, validation, and test data files have the following fields, all
  # tab-separated:
  # - 0: subject index
  # - 1: relation index
  # - 2: object index
  # - 3-...: arbitrary metadata fields
  # Indexes are assumed to be dense throughout.
  train: train.del
  valid: valid.del
  test: test.del

  # entity and relation maps store auxiliary information about each
  # entity/predicate. Fields are tab-separated:
  # - 0: entity/predicate index (as in train/valid/test)
  # - 1...: arbitrary metadata fields
  entity_map: entity_map.del
  relation_map: relation_map.del

## MODEL #######################################################################

# see model specific configuration files
model: ''                     # distmult, complex, transe, conve, ...


## TRAINING ####################################################################
## Used for training jobs.

train:
  type: 1toN                  # 1toN, negative_sampling
  max_epochs: 20
  optimizer: Adagrad          # sgd, adagrad, adam
  optimizer_args:
    # No default arguments are specified. Here, +++ signals that this option
    # allows arbitrary additional key-value pairs.
    +++: +++
  lr_scheduler: ConstantLRScheduler # schdulers from torch.optim.lr_scheduler such as ReduceLROnPlateau
  lr_scheduler_args:
    +++: +++
  batch_size: 100
  loss: bce                   # bce, margin_ranking
  loss_arg: 1.0               # margin for margin_ranking
  num_workers: 0
  pin_memory: False
  trace_level: epoch          # batch or epoch
  auto_correct: False         # True: allows for trainer to adjust certain setting, False: throws exception

1toN:
  # Amount of label smoothing (disabled when 0). Disencourages models to
  # perform extreme predictions (0 or 1).
  #
  # Technically, reduces all labels by fraction given by this value and
  # subsequently increases them by 1.0/num_entities. For example, 0s become
  # 1.0/num_entities and 1s become (1.0-label_smoothing)+1.0/num_entities.
  #
  # This form of label smoothing was used by ConvE
  # ( https://github.com/TimDettmers/ConvE/blob/853d7010a4b569c3d24c9e6eeaf9dc3535d78832/main.py#L156) with a default value of 0.1.
  label_smoothing: 0.0

negative_sampling:
  sampling_type: uniform
  num_negatives_s: 3          # this is default value if others are -1, must not be -1
  num_negatives_p: -1
  num_negatives_o: -1
  filter_true_s: False        # default is not filtering
  filter_true_p: False
  filter_true_o: False
  # set to spo (for small negative samples), sp_po (for large negative samples),
  # or set to auto which sets spo or sp_po automatically if the
  # max(num_negatives_s, num_negatives_p, num_negatives_o) > 30, only recommended
  # for models which compute sp_po with an inner product (not TransE, f.ex.).
  score_func_type: spo

# Configuration options for model validation/selection during training.
valid:
  # Validation is run every this many epochs during training (disable validation
  # with 0).
  every: 5

  # Name of the trace entry that holds the validation metric (higher value is
  # better)
  metric: mean_reciprocal_rank_filtered

  # If the above metric is not present in trace (e.g., because a custom metric
  # should be used), a Python expression to compute the metric. Can refer to
  # trace entries directly and to configuration options via config.
  # Example: 'math.sqrt(mean_reciprocal_rank) + config.get("user.par")'
  metric_expr: 'float("nan")'

  early_stopping:
    # Grace period of validation runs before a training run is stopped early
    # (disable early stopping with 0). If the value is set to n, then training is
    # stopped when there has been no improvement (compared to the best overall
    # result so far) in the validation metric during the last n validation runs.
    patience: 5

    # A minimum validation metric value threshold that should be reached after
    # n epochs, set to 0 epoch to turn off. Should be set very very conservatively
    # and the main purpose is for pruning completely useless hyperparameter
    # settings during hyper-parameter optimization.
    min_threshold:
      epochs: 0
      metric_value: 0.0

  # When to write a trace entry. Possible values: example, batch, epoch
  trace_level: epoch

  # Whether test data should used during validation. Filtered
  # metrics by default only use train and validation data. When this is set to
  # True, additionally produces "filtered_with_test" validation metrics (such as
  # MRR or HITS@k). Apparently, many existing models have been trained with this
  # set to True during model selection and using a metric such as
  # mean_reciprocal_rank_filtered_with_test.
  filter_with_test: False


checkpoint:
  # In addition the the checkpoint of the last epoch (which is transient),
  # create an additional checkpoint every this many epochs. Disable additional
  # checkpoints with 0.
  every: 5

  # Keep this many most recent additional checkpoints.
  keep: 3

## EVALUATION ##################################################################
## Used for evaluation jobs.

# fixed metrics: compute MRR and HITS@1, ..., HITS@k
eval:
  data: valid
  type: entity_ranking
  hits_at_k_s: [1, 3, 10, 50, 100, 200, 300, 400, 500, 1000]     # k for HITS@k
  batch_size: 100
  num_workers: 0
  pin_memory: False
  trace_level: example            # example or batch or epoch

## HYPERPARAMETER SEARCH #######################################################

search:
  # The type of search to run (see descriptions below). Possible values: manual,
  # grid, ax
  type: ax

  # Maximum number of parallel training jobs to run during a search.
  num_workers: 1

  # Device pool to use for training jobs. If this list is empty, `job.device` is
  # used for all parallel searches. Otherwise, the first `search.num_workers`
  # devices from this list are used. If the number of devices specified here is
  # less than `search.num_workers`, the list wraps around so that devices are
  # used by multiple jobs in parallel.
  device_pool: [ ]

# Manually specify all configurations to try
manual_search:
  # If false, only creates training job folders but does not run the jobs.
  run: True

  # List of configurations to search. Each entry is a record with a field
  # 'folder' (where the training job is stored) and an arbitrary number of other
  # fields that define the search configuration (e.g.
  # 'train.optimizer_args.lr').
  configurations: []


# Metajob for a grid search. Creates a manual search job with all points on the
# grid.
grid_search:
  # If false, only creates manual search job configuration file but does not run
  # it. This may be useful to edit the configuration (e.g., change folder names)
  # or to copy the created configurations to an existing manual search job.
  run: True

  # Define the grid. This is a dict where the key is a (flattened or nested)
  # configuration option (e.g., "train.optimizer_args.lr") and the value is an
  # array of grid-search values (e.g., [ 0.1, 0.01 ]). No default values
  # specified.
  parameters:
    +++: +++

# Dynamic search job that picks configurations using ax
ax_search:
  # Total number of trials to run
  num_trials: 10

  # Number of sobol trials to run (-1: automatic); remaining trials are GP+EI
  num_sobol_trials: -1

  # Search space definition passed to ax. See create_experiment in
  # https://ax.dev/api/service.html#module-ax.service.ax_client
  parameters: []
  parameter_constraints: []

  # 'fixed_parameters' is a dictionary of parameters and the values these
  # parameters should be fixed to for *generating* trials during BO. The purpose
  # of 'fixed_parameters' is to initialize a search (f.ex. with Sobol) and then
  # fix a range or choice parameter when generating new trials with BO to a
  # certain value. The names and values should correspond with the definitions
  # in 'ax_search.parameters'.
  # Attention: there is a name clash with regards to the meaning of 'fixed' in Ax
  # and Botorch! The difference to 'ax_search.parameters#type = fixed' is, that
  # those are filtered out for fitting a BO model, while the parameters for
  # 'fixed_parameters' are not. This setting is used in /botorch/gen.py
  #
  # Example:
  #
  #  parameters:
  #    - name: rescal.entity_embedder.dim
  #      type: choice
  #      values: [100, 200]
  #
  #  fixed_parameters:
  #    - name: rescal.entity_embedder.dim
  #      value: 100

  fixed_parameters: []

## USER PARAMETERS #####################################################################


visdom:
  # if enable=False all other parameters have no effect
  enable: False
  # attributes to include
  include:
    train: ["avg_loss", "avg_cost", "avg_penalty","forward_time","epoch_time"]
    eval: ["rank"]


# These parameters are not used by the kge framework itself. It can be used to
# add additional configuration options or information to this config.
user:
  +++: +++

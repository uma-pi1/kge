job.type: search
dataset.name: toy
train.optimizer: Adagrad
model: complex

search.type: random
random_search:
  num_trials: 5
  max_evals: 50
  parameters:
    - name: train.optimizer_args.lr
      type: range
      bounds: [0.0, 1.0]
    - name: train.optimizer_args.weight_decay
      type: range
      bounds: [1.0e-8, 1.0]
      log_scale: True
    - name: lookup_embedder.dim
      type: range
      bounds: [10, 50]

# Possible parameter alternatives and choices
#
#  -name: xx
#   type: fixed
#   value: x
#  -name: xx
#   type: range
#   integer_space: 4     # Natural number > 0    Can only have an integer_space OR be log_scale
#   log_scale: True      # Can only have an integer_space OR be log_scale
#  -name: xx
#   type: choice
#   values: [choice1, choice2]   # Choices can also be in the form of hyperopt parameters
#
#
#   Hyperopt Parameters:
#   {'name': hp.quniform('name', lower_bound, upper_bound, spacing)}   # For integer values
#   {'name': hp.uniform('name', lower_bound, upper_bound)}             # For real values
#   {'name': hp.choice('name', [choice1, choice2]}                     # For choices
